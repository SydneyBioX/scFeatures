

 Hi @ycao6928,
 
 Thank you for responding to the initial review and for the latest round of changes. The man pages are much improved, which was one of the main issues with the intial version. However, there remains some important issues that must be addressed before **scFeatures** could be accepted into Bioconductor.
 
 Regarding your question:
 
  "The only warning is that R CMD check takes over 10min. Please let me know if that's an issue that we have to solve now."
 
 I've discussed with other members of the review team and the consensus is that this really needs to be fixed. Bioconductor has to check thousands of packages and it simply too resource intensive if packages take  10 minutes to check.
 
 If you run `R CMD check --timings` you'll get some useful output about why it's taking so long - this information is already shown to you in the [most recent build report](http://bioconductor.org/spb_reports/scFeatures_buildreport_20230120050408.html):
 
 ```
 Examples with CPU (user + system) or elapsed time > 5s
                           user system elapsed
 run_gene_cor_celltype  200.390 19.396  64.438
 run_Morans_I            62.798  0.709  63.511
 run_gene_mean_celltype  16.961  5.207  14.797
 run_gene_prop_celltype  17.285  1.651  15.109
 run_pathway_prop        18.202  0.415  18.617
 run_pathway_mean        12.512  0.506  13.018
 run_pathway_gsva        11.829  0.593  12.423
 remove_mito              2.085  6.217   0.685
 run_gene_cor             5.239  0.251   4.659
 ```
 
 From the above we see that there are 2 examples taking > 1 min and a half dozen more taking 10 - 20 secs, so they seem like potential places to substantially reduce the time it takes to check the package. To take one example, the example for `run_gene_cor_celltype()` needn't be so large - you could run it on a subset of features and/or genes (this reduces the run time to 3 secs on my laptop instead of 200 secs in the above build report).

 ```r
 data <- readRDS(
   system.file("extdata", "example_scrnaseq.rds", package = "scFeatures"))
  
 # Only using a subset of the data for the example
 data <- data[1:50, 1:20]
 
 feature_gene_cor_celltype <- run_gene_cor_celltype(
   data,
   type = "scrna", 
   num_top_gene = 10, 
   ncores = 1)
 ```
 
 Another other important issue that still must be fixed is to have most of the code in the vignettes be evaluated. I mentioned this in the initial review and it's still the case that very little of the code in the vignettes is evaluated.
 
 I understand that because you already over the time limits you have opted to not evaluate the code, but I'm afraid that this isn't an acceptable workaround. Evaluated code in the vignettes is essential, so to address this I think you will need to re-think the vignettes, as well as the man pages.
 
 Here are some quick thoughts on how you might achieve this. As a new user, I found that there was a lot of repetition between the vignettes and the man pages. A lot of the text in the `scFeatures_detail.Rmd` vignettes really just repeats information that is (or should be) in the man pages (i.e. describing individual functions along with their inputs, parameters, and outputs). This runs the risk of the various bits documentation and the code falling out of sync, especially when the code isn't evaluated as part of `R CMD check`, and this is one of the reasons why Bioconductor requires evaluated examples and vignettes.
 
 If you keep the details about the various functions focused in the man pages (removing their repetition from the vignettes) then the vignette(s) could then by substantially reduced and instead just focus on how **scFeatures** might be used in a more involved analysis or workflow. You've already got 3 such examples as a starting point:
 
 * Integration with **ClassifyR**
 * As input to a survival analysis
 * As part of an association analysis
 
 In revising the vignette(s), each of these case studies would greatly benefit from more exposition and explanation because this is lacking in their current form (e.g. the survival analysis is 1 sentence with no explanation of the data, model, or outputs).
 
 ## Required
 * [x]  Most of the code in the vignettes is **still** unevaluated and so is untested by `R CMD check`. Bioconductor expects that vignettes contain non-trivial evaluated code chunks and static vignettes are generally not acceptable.
Response: We have now created a new vignette, where all the code are evaluated. 

 * [x]  Please give the vignettes informative titles and filenames; see https://contributions.bioconductor.org/docs.html#vignettes
   
   * Compare the titles of the **scFeatures** vignettes to those from some other packages - it should be a short 1 sentence summary of the vignette (like the title of a paper).
     ![Screen Shot 2023-01-27 at 1 32 10 pm](https://user-images.githubusercontent.com/1049741/215001876-66dc8c03-db23-442d-93c2-5f928f393fee.png)
Response: The newest vignette now has informative name. 

 * [x]  `inst/extdata` is usually used for 'raw' data, so these data properly belong under `data/` rather than `inst/extdata/`; see https://contributions.bioconductor.org/data.html.
   
   * Regarding your comment: "We have tried this, but found the data directory only allows .Rdata file instead of the .RDS format. Once we convert to .Rdata, the file size expanded from under 3MB to 16MB and became too big to include in the package. Therefore we decided to keep the data in the inst/extdata."
     
     * I'm not sure how you tried to do this, but I was able to compress the `example_scrnaseq` data set to a 1.4 MB `.RData` file by using the following:

 ```r
 x <- readRDS(system.file("extdata", "example_scrnaseq.rds", package = "scFeatures"))
 # Note the use of xz-compression, which generally results in the smallest file 
 # sizes. 
 save(x, file = "test.RData", compress = "xz")
 ```
 
 * So unless there is another reason, please store the data under `data/` and document it as explained in https://contributions.bioconductor.org/data.html.
 
Response: Thank you for the tip! We have now stored the data under `data/` and added relevant documentation. 

 ## Recommended
 * [ ]  It is strongly recommended to add unit tests. I would suggest starting with the individual `scFeatures::run_*()` functions that underpin the wrapper `scFeatures::scFeatures()` function.
 * [ ]  Recommend adding a NEWS file (see https://contributions.bioconductor.org/news.html).
 * [x]  Why does `remove_mito()` remove more than just mitochondrial genes? I strongly recommend choosing a more precise name for the function or split the functionality up into distinct `remove_mito()`, `remove_ribo()`, etc. functions.
Response: We have now changed the `remove_mito()` function name into `remove_mito_ribo()` so the name is more accurate. 

 * [x]  Minor point regarding 'This can be obtained from performing cell type prediction using reference data, for example, using `SCTransform` from Seurat (see https://satijalab.org/seurat/articles/spatial_vignette.html#integration-with-single-cell-data-1)'.
   
   * This still seems to me not quite accurate. `SCTransform()` is just a normalization method; the actual 'cell type prediction using reference data' is via label transfer with `FindTransferAnchors()` and `TransferData()` (where the reference and target datasets just so happen to have been normalized with `SCTransform()` but other normalizations are possible).
   * If keeping, I'd suggest changing to 'This can be obtained by performing cell type prediction using reference data, for example, using methods available in `r BiocStyle::CRANpkg('Seurat')` (see https://satijalab.org/seurat/articles/spatial_vignette.html#integration-with-single-cell-data-1)'.
Response: Thank you for spotting this! We have now replaced the sentence with your suggestion. 
