[{"path":"/articles/scFeatures_associationstudy.html","id":"association-study-of-the-features-with-the-conditions","dir":"Articles","previous_headings":"","what":"Association study of the features with the conditions","title":"An association study of features with conditions with scFeatures","text":"scFeatures provides function automatically run association study features conditions produce html file visualisation features association result. , first need generate features using scFeatures store result named list format. demonstration purpose, provide example features list. code show step step guide generating hmtl output features list. Inside directory defined output_folder, see html report output name output_report.html.","code":"# here we use the demo data from the package  scfeatures_result <- readRDS(system.file(\"extdata\", \"scfeatures_result.rds\",                              package = \"scFeatures\"))  # here we use the current working directory to save the html output # modify this to save the html file to other directory output_folder <-  tempdir()  run_association_study_report(scfeatures_result, output_folder )"},{"path":"/articles/scFeatures_associationstudy.html","id":"some-additional-notes-on-creating-the-scfeatures_list","dir":"Articles","previous_headings":"","what":"Some additional notes on creating the scfeatures_list","title":"An association study of features with conditions with scFeatures","text":"generating features using scFeatures, make sure sample information format a_cond_b, sample ID b condition, eg, patient09_cond_nonresponder. can retrieve sample ID corresponding condition running analysis. creating list, name list must use name shown . Otherwise, possible tell feature type list entry create correct visualisation feature type. feature types need provided. feature type missing, section html feature type just left blank.","code":"# example of creating the feature list using the correct naming conventions scfeatures_result <- list(     proportion_raw = proportion_raw,    proportion_logit =   proportion_logit,     proportion_ratio = proportion_ratio,     gene_mean_celltype = gene_mean_celltype,    gene_prop_celltype = gene_prop_celltype,     gene_cor_celltype = gene_cor_celltype,     pathway_gsva = pathway_gsva ,     pathway_mean = pathway_mean,     pathway_prop = pathway_prop,    CCI = CCI ,    gene_mean_aggregated = gene_mean_aggregated ,     gene_cor_aggregated = gene_cor_aggregated ,     gene_prop_aggregated = gene_prop_aggregated,    L_stats  = L_stats ,     morans_I = morans_I,     celltype_interaction = celltype_interaction,    nn_correlation = nn_correlation )"},{"path":"/articles/scFeatures_associationstudy.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"An association study of features with conditions with scFeatures","text":"","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Debian GNU/Linux 11 (bullseye) ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.13.so ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] BiocStyle_2.24.0 ##  ## loaded via a namespace (and not attached): ##  [1] rstudioapi_0.14     knitr_1.40          magrittr_2.0.3      ##  [4] R6_2.5.1            ragg_1.2.3          rlang_1.0.6         ##  [7] fastmap_1.1.0       stringr_1.4.1       tools_4.2.1         ## [10] xfun_0.33           cli_3.4.1           jquerylib_0.1.4     ## [13] systemfonts_1.0.4   htmltools_0.5.3     yaml_2.3.5          ## [16] digest_0.6.29       rprojroot_2.0.3     pkgdown_2.0.6       ## [19] bookdown_0.30       textshaping_0.3.6   BiocManager_1.30.18 ## [22] purrr_0.3.5         sass_0.4.2          fs_1.5.2            ## [25] memoise_2.0.1       cachem_1.0.6        evaluate_0.17       ## [28] rmarkdown_2.17      stringi_1.7.8       compiler_4.2.1      ## [31] bslib_0.4.0         desc_1.4.2          jsonlite_1.8.2"},{"path":"/articles/scFeatures_detail.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A detailed explanation of scFeatures' features","text":"vignette provides detailed description scFeatures, including description feature category, expected output case studies using generated features classification task survival analysis. quick starting point (TLDR version), please see vignette “Vignette - summary scFeatures functions”. Note scFeatures functions contain ncores argument controls number cores. default 1 core. wish run downstream analysis using generated features (see “Vignette - association study”), please make sure run scFeatures, sample format a_cond_b. sample ID b condition, eg, patient09_cond_nonresponder. can retrieve sample ID corresponding condition running analysis.","code":"library(scFeatures)"},{"path":"/articles/scFeatures_detail.html","id":"quick-run-of-scfeatures","dir":"Articles","previous_headings":"","what":"Quick run of scFeatures","title":"A detailed explanation of scFeatures' features","text":"scFeatures can run using one line code scfeatures_result <- scFeatures(data), generates list dataframes containing feature types form samples x features. function uses default settings generate feature types. provide example describes can done spatial proteomics dataset.","code":"data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) data <- process_data(data, normalise = TRUE) #  perform normalisation  scfeatures_result <- scFeatures(data) #> [1] \"generating CCI features\" #--------------------------------------------------------------------------- # read in data #---------------------------------------------------------------------------  data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") )  # randomly generate some x and y coordinate to make this a  # toy \"spatial proteomics\" data x <- sample(1:100, ncol(data) , replace = T) y <- sample(1:100, ncol(data) , replace = T) data <- makeSeurat(data, spatialCoords = list(x,y)) data <- process_data(data, normalise = T)      # select feature types to compute. feature_types <- c(     \"proportion_raw\", \"pathway_gsva\", \"L_stats\", \"gene_mean_celltype\",     \"gene_prop_aggregated\" )   scfeatures_result <- scFeatures(data,     feature_types = feature_types,     type = \"spatial_p\",     # set to user specified pathways.     geneset = list(         \"pathway_a\" = rownames(data)[1:50],         \"pathway_b\" = rownames(data)[51:100]     ),     # by default uses top variable genes to generate the celltype     # specific gene expression feature, now set to user defined genes.     celltype_genes = data.frame(         celltype = c(rep(\"Naive T Cells\" , 10),  rep( \"Cytotoxic CD8\" , 10)),         marker = c( rownames(data)[1:10],  rownames(data)[11:20])     ),     # by default uses top variable genes to generate the overall     # aggregated gene expression feature category, now set to user     # defined genes.     aggregated_genes =  rownames(data)[1:50],     # by default uses single core     ncores = 8 )"},{"path":"/articles/scFeatures_detail.html","id":"scfeatures-on-single-cell-rna-seq-data","dir":"Articles","previous_headings":"","what":"scFeatures on single-cell RNA-seq data","title":"A detailed explanation of scFeatures' features","text":"demonstration purpose, provide subsampled version melanoma pre-treatment dataset [1] used manuscript. scFeatures takes data Seurat object, gene expression stored assay RNA. required metadata celltype sample label. condition label optional, required users wish learn difference disease condition using generated features.","code":"data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") )  data <- process_data(data) # some pre-processing, including normalisation  # confirm the data contain cell types unique(data$celltype) #> [1] \"Naive T Cells\"          \"Cytotoxic CD8\"          \"CD8, T Effector Memory\"  # confirm the data contain samples unique(data$sample)[1:5] #> [1] \"Pre_P8\"  \"Pre_P27\" \"Pre_P7\"  \"Pre_P20\" \"Pre_P3\"  # disease conditions in this data unique(data$condition) #> [1] \"Responder\"     \"Non-responder\"  # format the patient ID as `a_cond_b` eg, `patient09_cond_nonresponder`. This # is so that we can retrieve the sample ID and the corresponding condition when # running downstream analysis on the generated features data$sample <- paste0(data$sample, \"_cond_\", data$condition) unique(data$sample)[1:5] #> [1] \"Pre_P8_cond_Responder\"      \"Pre_P27_cond_Non-responder\" #> [3] \"Pre_P7_cond_Responder\"      \"Pre_P20_cond_Non-responder\" #> [5] \"Pre_P3_cond_Non-responder\""},{"path":"/articles/scFeatures_detail.html","id":"feature-generation","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data","what":"Feature generation","title":"A detailed explanation of scFeatures' features","text":"demonstrate usage scFeatures extract features scRNA-seq data. Note , type argument, currently supported options : * scrna : stands single-cell RNA-seq data * spatial_p: stands spatial proteomics data * spatial_t: stands spatial transcriptomics data default, type set scrna, therefore necessarily specify type input data scRNA-seq data.","code":""},{"path":"/articles/scFeatures_detail.html","id":"cell-type-proportions","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data > Feature generation","what":"Cell type proportions","title":"A detailed explanation of scFeatures' features","text":"Proportion raw: untransformed proportion. Proportion logit: logit-transformed proportion value, common transformation used proportional data. Proportion ratio: calculates ratio proportion two cell types. Proportion raw Proportion logit: features form celltype , celltype b, number representing proportions. Proportion ratio: features form celltype vs celltype b, celltype vs celltype c, number representing ratio two cell types.","code":"feature_proportion_raw <- run_proportion_raw(data) feature_proportion_logit <- run_proportion_logit(data) feature_proportion_ratio <- run_proportion_ratio(data)"},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-gene-expressions","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data > Feature generation","what":"Cell type specific gene expressions","title":"A detailed explanation of scFeatures' features","text":"Detail: feature category aggregate cells across cell type construct various features. default, (features argument provided), restrict top variable genes reduce dimensions feature. argument num_top_gene determines many genes include. Gene mean celltype: cell type specific gene expression. Gene proportion celltype: particular gene, percentage cells cell type expressed. Gene correlation celltype: correlation expressions two given genes cell type. Alternatively, users can provide gene interest features argument. Gene mean celltype: features form gene 1 celltype , gene 2 celltype b … etc, number representing average gene expression given gene across cells given celltype. Gene proportion celltype: features form gene 1 celltype , gene 2 celltype b … etc, number representing average gene expression given gene across cells given celltype. Gene correlation celltype: features form gene 1 vs gene 2 cell type , gene 1 vs gene 3 cell type b … etc, numbers representing correlation two given genes given cell type. Note mitochondria ribosomal genes may interesting look . Therefore, users can choose remove genes using function remove_mito. step optional.","code":"data_remove_mito <- remove_mito(data)  feature_gene_mean_celltype <- run_gene_mean_celltype(data_remove_mito)  # we can provide our own sets of genes genes_of_interest <- data.frame(     marker = c(\"S100A11\", \"GZMB\", \"DUSP1\"),     celltype = c(         \"CD8, T Effector Memory\",         \"CD8, T Effector Memory\",         \"Naive T Cells\"     ) ) feature_gene_prop_celltype <- run_gene_prop_celltype(     data_remove_mito,     genes = genes_of_interest )  # we can change the number to pick ~10 top variables genes per cell type feature_gene_cor_celltype <- run_gene_cor_celltype(     data_remove_mito,     num_top_gene = 10 )"},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-pathway-expressions","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data > Feature generation","what":"Cell type specific pathway expressions","title":"A detailed explanation of scFeatures' features","text":"pathway_gsva: uses GSVA function calculate gene set enrichment score individual cells, aggregates scores across cells within cell type. pathway_mean: averages gene expression genes pathway. pathway_prop: genes pathway, calculates percentage cells genes expressed cell type. pathway_gsva features form pathway 1 celltype , pathway 2 celltype b … etc, number representing gene set enrichment score given pathway cells given celltype. pathway_mean features form pathway 1 celltype , pathway 2 celltype b … etc, number representing averaged expression given pathway cells given celltype. pathway_prop features form pathway 1 celltype , pathway 2 celltype b … etc, number representing proportion expression given pathway cells given celltype. Note necessarily indicate whether species “Homo sapiens” “Mus musculus”. default “Homo sapiens”.","code":"# This function can take a while. Therefore for larger datasets (eg, over # 30,000 cells), we provide a subsample function to increase the speed. feature_pathway_gsva <- run_pathway_gsva(     data,     geneset = NULL, species = \"Homo sapiens\", subsample = FALSE ) feature_pathway_mean <- run_pathway_mean(data) feature_pathway_prop <- run_pathway_prop(data)"},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-cell-cell-communications","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data > Feature generation","what":"Cell type specific cell-cell communications","title":"A detailed explanation of scFeatures' features","text":"CCI: uses SingleCellSignalR package calculate cell-cell interaction score ligand recepor pairs. CCI: features form ligand 1 receptor 2 celltype , ligand 1 receptor 2 celltype b … etc, numbers representing cell-cell interaction probability.","code":"feature_CCI <- run_CCI(data)"},{"path":"/articles/scFeatures_detail.html","id":"overall-aggregated-gene-expressions","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data > Feature generation","what":"Overall aggregated gene expressions","title":"A detailed explanation of scFeatures' features","text":"Detail: feature types category calculated based aggregated expressions across cells. argument num_top_gene determines many genes include. default (features argument provided), algorithm picks top variable genes. Expected output: Gene mean: features form gene 1, gene 2 … etc, numbers representing averaged gene expression across cells. Gene cor: features form gene 1 vs gene 2, gene 1 vs gene 3 … etc, numbers representing correlation gene expressions. Gene prop: features form gene 1, gene 2 … etc, numbers representing proportion gene expressed across cells.","code":"feature_gene_mean_aggregated <- run_gene_mean(data)  genes_of_interest <- c(\"TIGIT\", \"PDCD1\") feature_gene_cor_aggregated <- run_gene_cor(     data,     genes = genes_of_interest ) # we can change this number to pick 100 top variable genes feature_gene_prop_aggregated <- run_gene_prop(data, num_top_gene = 100)"},{"path":"/articles/scFeatures_detail.html","id":"classification-of-conditions-using-the-generated-features","dir":"Articles","previous_headings":"scFeatures on single-cell RNA-seq data","what":"Classification of conditions using the generated features","title":"A detailed explanation of scFeatures' features","text":"build disease prediction model generated features use utilise ClassifyR. output scFeatures matrix sample x feature, ie, row corresponds sample, column corresponds feature, can directly used X. order rows order unique(data$sample). use condition y build classification model disease condition. recommend using ClassifyR::crossValidate cross-validated classification extracted feaures.","code":"# Using the feature type gene mean celltype as an example\")  # inspect the first 5 rows and first 5 columns feature_gene_mean_celltype[1:5, 1:5] #>                            Naive T Cells--NOSIP Naive T Cells--LUC7L3 #> Pre_P8_cond_Responder                 1.3403199             1.3253486 #> Pre_P27_cond_Non-responder            0.9504078             0.9565850 #> Pre_P7_cond_Responder                 0.9230278             0.7445286 #> Pre_P20_cond_Non-responder            0.9472109             0.9359819 #> Pre_P3_cond_Non-responder             0.7099657             1.3188926 #>                            Naive T Cells--ARL6IP4 Naive T Cells--IL2RG #> Pre_P8_cond_Responder                   1.1861664             1.304897 #> Pre_P27_cond_Non-responder              0.0000000             1.018693 #> Pre_P7_cond_Responder                   0.2737271             1.462253 #> Pre_P20_cond_Non-responder              0.4789126             1.944960 #> Pre_P3_cond_Non-responder               0.6994015             1.607346 #>                            Naive T Cells--SNRPD2 #> Pre_P8_cond_Responder                  1.1722461 #> Pre_P27_cond_Non-responder             0.0000000 #> Pre_P7_cond_Responder                  0.8139368 #> Pre_P20_cond_Non-responder             0.4753097 #> Pre_P3_cond_Non-responder              0.4793805  # inspect the dimension of the matrix # this means that there are 12354 features in this feature type dim(feature_gene_mean_celltype) #> [1]   16 3642  # confirm that the rows in in the order of unique(data$sample) all(rownames(feature_gene_mean_celltype) == unique(data$sample)) #> [1] TRUE library(ClassifyR)  # X is the feature type generated # y is the condition for classification X <- feature_gene_mean_celltype y <- data@meta.data[!duplicated(data$sample), ] y <- y[match(rownames(X), y$sample), ]$condition  # run the classification model using random forest result <- ClassifyR::crossValidate(     X, y,     classifier = \"randomForest\", nCores = 8,     nFolds = 3, nRepeats = 20 )  ClassifyR::performancePlot(results = result)"},{"path":"/articles/scFeatures_detail.html","id":"scfeatures-on-spatial-proteomics-data","dir":"Articles","previous_headings":"","what":"scFeatures on spatial proteomics data","title":"A detailed explanation of scFeatures' features","text":"demonstration purpose, “generate” spatial proteomics data single cell RNA-seq data randomly generating x y - coordinates.","code":"data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") )  # randomly generate some x and y coordinate to make this a  # toy \"spatial proteomics\" data x <- sample(1:100, ncol(data) , replace = T) y <- sample(1:100, ncol(data) , replace = T) data <- makeSeurat(data, spatialCoords = list(x,y)) data <- process_data(data, normalise = T)    # how the x- and y- coordinates look like  data$x_cord[1:5] #>   E6_P3_MMD4_L001    B2_P3_M91_L001 H1_P7_M60.B1_L001    E3_P1_M53_L001  #>                37                 3                81                21  #>         G3_P2_M17  #>                38"},{"path":[]},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-proportions","dir":"Articles","previous_headings":"scFeatures on spatial proteomics data > Feature generation","what":"Cell type specific proportions","title":"A detailed explanation of scFeatures' features","text":"spatial proteomics, need set type spatial_p","code":"feature_proportion_raw <- run_proportion_raw(data, type = \"spatial_p\") feature_proportion_logit <- run_proportion_logit(data, type = \"spatial_p\") feature_proportion_ratio <- run_proportion_ratio(data, type = \"spatial_p\")"},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-gene-expressions-1","dir":"Articles","previous_headings":"scFeatures on spatial proteomics data > Feature generation","what":"Cell type specific gene expressions","title":"A detailed explanation of scFeatures' features","text":"default, feature category calculates gene/protein expression based top 100 variable genes/proteins per cell type. However, data measured 38 proteins, proteins used.","code":"feature_gene_mean_celltype <- run_gene_mean_celltype(data, type = \"spatial_p\") feature_gene_prop_celltype <- run_gene_prop_celltype(data, type = \"spatial_p\") feature_gene_cor_celltype <- run_gene_cor_celltype(data, type = \"spatial_p\")"},{"path":"/articles/scFeatures_detail.html","id":"overall-aggregated-gene-expressions-1","dir":"Articles","previous_headings":"scFeatures on spatial proteomics data > Feature generation","what":"Overall aggregated gene expressions","title":"A detailed explanation of scFeatures' features","text":"default, feature category calculates gene/protein expression based top 1500 variable genes/proteins. However, data 38 proteins, use proteins.","code":"feature_gene_mean_aggregated <- run_gene_mean(data, type = \"spatial_p\") feature_gene_prop_aggregated <- run_gene_prop(data, type = \"spatial_p\") feature_gene_cor_aggregated <- run_gene_cor(data, type = \"spatial_p\")"},{"path":"/articles/scFeatures_detail.html","id":"spatial-metrics","dir":"Articles","previous_headings":"scFeatures on spatial proteomics data > Feature generation","what":"Spatial metrics","title":"A detailed explanation of scFeatures' features","text":"L_function: L values pairs proteins calculated using L function defined literature[2]. L value greater zero indicates spatial attraction pair proteins whereas L value less zero indicates spatial repulsion. Morans_I: Moran’s calculated using function defined literature [3]. calculates spatial autocorrelation based locations values simultaneously. value closer 1 indicates clustering similar values value closer -1 indicates clustering dissimilar values. value 0 indicates particular clustering structure, ie, values spatially distributed randomly. celltype_interaction: find nearest neighbours cell cell types neighbours. considered spatial interaction pairs. cell type composition spatial interaction pairs used features. nn_correlation: Pearson’s correlation calculated protein expression cell nearest neighbour cell spatial proteomics. L_function: features form protein 1 vs protein 2, protein 1 vs protein 3 … etc, numbers representing L values. Morans_I: features form protein 1, protein 2 … etc, numbers representing Moran’s value. celltype_interaction: features form protein 1 vs protein 2, protein 1 vs protein 3 … etc, numbers representing proportion interaction pairs give sample. nn_correlation: features form protein 1, protein 2 … etc, numbers representing Pearson’s correlation.","code":"feature_L_stats <- run_L_function(data, type = \"spatial_p\") feature_morans_I <- run_Morans_I(data, type = \"spatial_p\") feature_celltype_interaction <- run_celltype_interaction(     data,     type = \"spatial_p\" ) feature_nn_correlation <- run_nn_correlation(data, type = \"spatial_p\")"},{"path":"/articles/scFeatures_detail.html","id":"survival-analysis-using-the-generated-features","dir":"Articles","previous_headings":"scFeatures on spatial proteomics data","what":"Survival analysis using the generated features","title":"A detailed explanation of scFeatures' features","text":"Suppose want use features perform survival analysis, “generate” random survival data.","code":"library(survival) library(survminer)  nncor <- t(feature_nn_correlation) nncor <- nncor[, !colSums(nncor)==0] # run hierarchical clustering hclust_res <- hclust(     as.dist(1 - cor(nncor, method = \"pearson\")),     method = \"ward.D2\" )  # generate some survival outcome survival_day <- sample(1:100, ncol(nncor)) censoring <- sample(0:1, ncol(nncor), replace = T)  cluster_res <- cutree(hclust_res, k = 2) metadata <- data.frame( cluster = factor(cluster_res),                         survival_day = survival_day,                         censoring = censoring)  # plot survival curve fit <- survfit(     Surv(survival_day, censoring) ~ cluster,     data = metadata ) ggsurv <- ggsurvplot(fit,     conf.int = FALSE, risk.table = TRUE,     risk.table.col = \"strata\", pval = TRUE ) ggsurv"},{"path":"/articles/scFeatures_detail.html","id":"scfeatures-on-spatial-transcriptomics-data","dir":"Articles","previous_headings":"","what":"scFeatures on spatial transcriptomics data","title":"A detailed explanation of scFeatures' features","text":"demonstration purpose, also “generate” spatial transciptomics single-cell RNA-seq data. spatial transcriptomics, required information sample, x_cord y_cord (x- y- coordinates spot). Additionally, two assays needed, RNA, contains gene expression spot predictions. predictions assay matrix form cell types x spot, stores cell type probability spot. can obtained performing cell type prediction using reference data, example, using SCTransform Seurat (see https://satijalab.org/seurat/articles/spatial_vignette.html#integration--single-cell-data-1). purpose cell type probability matrix due spatial transcriptomics assay contain multiple cells multiple cell type populations, cell type prediction necessary generating cell type specific feature types.","code":"data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") )  # generate a toy \"spatial transcriptomics\" data data$celltype <- NULL #spatial transcriptomics don't have celltype   # randomly generate some x and y coordinates x <- sample(1:100, ncol(data) , replace = T) y <- sample(1:100, ncol(data) , replace = T)  # for spatial transcriptomics, we need to estimate the number of cells per spot data <- get_num_cell_per_spot(data)  # also need a dataframe of celltype probability at each spot  # here we randomly create one  nrow <- 5 #pretend there are 5 cell types  ncol <- ncol(data)   # Create a matrix of random numbers matrix <- matrix(runif(nrow * ncol), nrow, ncol) # Normalize the columns of the matrix so that each column sum to 1 prediction.scores <-  sweep(matrix, 2, colSums(matrix), \"/\") colnames(prediction.scores) <- colnames(data) rownames(prediction.scores) <- c(paste0(\"celltype\", 1:5))  # format the data using makeSeurat data <- makeSeurat(data, spatialCoords = list(x,y), spotProbability = prediction.scores) data <- process_data(data, normalise = T)       # how the prediction assay look like # the rows contain the predicted cell type probability of each spot data@assays$predictions[, 1] #>                            E6_P3_MMD4_L001 #> prediction.score.celltype1      0.06454154 #> prediction.score.celltype2      0.18199502 #> prediction.score.celltype3      0.19232122 #> prediction.score.celltype4      0.38186122 #> prediction.score.celltype5      0.17928100  # confirm the data include samples unique(data$sample)[1:5] #> [1] \"Pre_P8\"  \"Pre_P6\"  \"Pre_P27\" \"Pre_P7\"  \"Pre_P20\"  # conditions in this data unique(data$condition) #> [1] \"Responder\"     \"Non-responder\"  # format the patient ID as `a_cond_b` eg, `patient09_cond_nonresponder`. This is # so that we can retrieve the sample ID and the corresponding condition when # running downstream analysis on the generated features data$sample <- paste0(data$sample, \"_cond_\", data$condition)"},{"path":"/articles/scFeatures_detail.html","id":"feature-generation-2","dir":"Articles","previous_headings":"scFeatures on spatial transcriptomics data","what":"Feature generation","title":"A detailed explanation of scFeatures' features","text":"spatial transcriptomics, spot contains multiple cells potentially multiple cell types. Therefore, implementation feature categories involving cell type specific features (.e., cell type proportions, cell type specific gene expressions, cell type specific pathway expressions, spatial metrics) different implementations single-cell based datasets (.e., scRNA-seq spatial proteomics) described details .","code":""},{"path":"/articles/scFeatures_detail.html","id":"cell-type-proportions-1","dir":"Articles","previous_headings":"scFeatures on spatial transcriptomics data > Feature generation","what":"Cell type proportions","title":"A detailed explanation of scFeatures' features","text":"Detail: spatial transriptomics, measurement spot taken multiple cells, can use cell type probability matrix relative number cells spot jointly estimate cell type proportion sample. Expected output: output format scRNA-seq data.","code":"feature_proportion_raw <- run_proportion_raw(data, type = \"spatial_t\") feature_proportion_logit <- run_proportion_logit(data, type = \"spatial_t\") feature_proportion_ratio <- run_proportion_ratio(data, type = \"spatial_t\")"},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-gene-expressions-2","dir":"Articles","previous_headings":"scFeatures on spatial transcriptomics data > Feature generation","what":"Cell type specific gene expressions","title":"A detailed explanation of scFeatures' features","text":"Detail: use cell type probability obtain regression coefficients gene associated cell type. Expected output: sample, features form gene celltype , gene celltype b … etc, number representing regression coefficient.","code":"data_remove_mito <- remove_mito(data)  feature_gene_mean_celltype <- run_gene_mean_celltype(     data_remove_mito,     type = \"spatial_t\",     genes = rownames(data_remove_mito)[1:100] # to speed up the vignette generation  )"},{"path":"/articles/scFeatures_detail.html","id":"cell-type-specific-pathway-expressions-1","dir":"Articles","previous_headings":"scFeatures on spatial transcriptomics data > Feature generation","what":"Cell type specific pathway expressions","title":"A detailed explanation of scFeatures' features","text":"Detail: use approach obtain regression coefficient cell type gene. regression coefficients genes involved particular pathway summed. Expected output: sample, features form pathway celltype , pathway celltype b … etc, number representing summation regression coefficient.","code":"feature_pathway_mean <- run_pathway_mean(     data,     geneset = NULL, species = \"Homo sapiens\", type = \"spatial_t\" )"},{"path":"/articles/scFeatures_detail.html","id":"overall-aggregated-gene-expressions-2","dir":"Articles","previous_headings":"scFeatures on spatial transcriptomics data > Feature generation","what":"Overall aggregated gene expressions","title":"A detailed explanation of scFeatures' features","text":"Detail: based expression genes across cells. Expected output: output format scRNA-seq data.","code":"feature_gene_mean_aggregated <- run_gene_mean(data, type = \"spatial_t\") feature_gene_prop_aggregated <- run_gene_prop(data, type = \"spatial_t\") feature_gene_cor_aggregated <- run_gene_cor(data, type = \"spatial_t\")"},{"path":"/articles/scFeatures_detail.html","id":"spatial-metrics-1","dir":"Articles","previous_headings":"scFeatures on spatial transcriptomics data > Feature generation","what":"Spatial metrics","title":"A detailed explanation of scFeatures' features","text":"L_function: L values pairs genes calculated using L function defined literature. used estimated cell type proportion spot calculate L function. Morans_I: implementation spatial proteomics. celltype_interaction: assume nearest neighbours cells captured within spot consider spatial interaction pairs. use estimated cell type proportion spot calculate spatial interaction cell types. nn_correlation: Pearson’s correlation calculated gene expression spot nearest neighbour spot. L_function: features form gene 1 vs gene 2, gene 1 vs gene 3 … etc, numbers representing L values. Morans_I: features form gene 1, gene 2 … etc, numbers representing Moran’s value. celltype_interaction: features form gene 1 vs gene 2, gene 1 vs gene 3 … etc, numbers representing proportion interaction pairs give sample. nn_correlation: features form gene 1, gene 2 … etc, numbers representing Pearson’s correlation.","code":"feature_L_stats <- run_L_function(data, type = \"spatial_t\") feature_morans_I <- run_Morans_I(data, type = \"spatial_t\") feature_celltype_interaction <- run_celltype_interaction(     data,     type = \"spatial_t\" ) feature_nn_correlation <- run_nn_correlation(data, type = \"spatial_t\")"},{"path":"/articles/scFeatures_detail.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"A detailed explanation of scFeatures' features","text":"Sade-Feldman, M., Yizhak, K., Bjorgaard, S. L., Ray, J. P., de Boer, C. G., Jenkins, R. W., … & Hacohen, N.(2018). Defining T cell states associated response checkpoint immunotherapy melanoma. Cell, 175(4), 998-1013. Besag, J. (1977) Discussion Dr Ripley’s paper. Journal Royal Statistical Society, Series B, 39, 193–195. Moran, P. . P. (1950).”Notes Continuous Stochastic Phenomena”. Biometrika.37 (1) : 17–23. doi:10.2307/2332142","code":""},{"path":"/articles/scFeatures_detail.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"A detailed explanation of scFeatures' features","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Debian GNU/Linux 11 (bullseye) #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.13.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] survminer_0.4.9             ggpubr_0.4.0                #>  [3] ggplot2_3.3.6               ClassifyR_3.1.28            #>  [5] survival_3.4-0              BiocParallel_1.30.4         #>  [7] MultiAssayExperiment_1.22.0 SummarizedExperiment_1.26.1 #>  [9] Biobase_2.56.0              GenomicRanges_1.48.0        #> [11] GenomeInfoDb_1.32.4         IRanges_2.30.1              #> [13] MatrixGenerics_1.8.1        matrixStats_0.62.0          #> [15] generics_0.1.3              scFeatures_0.99.9           #> [17] S4Vectors_0.34.0            BiocGenerics_0.42.0         #> [19] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] rsvd_1.0.5                  ica_1.0-3                   #>   [3] Rsamtools_2.12.0            foreach_1.5.2               #>   [5] SingleCellSignalR_1.8.0     lmtest_0.9-40               #>   [7] rprojroot_2.0.3             crayon_1.5.2                #>   [9] spatstat.core_2.4-4         MASS_7.3-58.1               #>  [11] rhdf5filters_1.8.0          nlme_3.1-160                #>  [13] backports_1.4.1             rlang_1.0.6                 #>  [15] XVector_0.36.0              ROCR_1.0-11                 #>  [17] irlba_2.3.5.1               limma_3.52.4                #>  [19] filelock_1.0.2              rjson_0.2.21                #>  [21] bit64_4.0.5                 glue_1.6.2                  #>  [23] pheatmap_1.0.12             sctransform_0.3.5           #>  [25] parallel_4.2.1              spatstat.sparse_3.0-0       #>  [27] AnnotationDbi_1.58.0        spatstat.geom_3.0-3         #>  [29] tidyselect_1.2.0            km.ci_0.5-6                 #>  [31] SeuratObject_4.1.2          fitdistrplus_1.1-8          #>  [33] XML_3.99-0.11               tidyr_1.2.1                 #>  [35] zoo_1.8-11                  GenomicAlignments_1.32.1    #>  [37] xtable_1.8-4                magrittr_2.0.3              #>  [39] evaluate_0.17               scuttle_1.6.3               #>  [41] cli_3.4.1                   zlibbioc_1.42.0             #>  [43] rstudioapi_0.14             miniUI_0.1.1.1              #>  [45] sp_1.5-0                    bslib_0.4.0                 #>  [47] rpart_4.1.16                ensembldb_2.20.2            #>  [49] shiny_1.7.2                 GSVA_1.44.5                 #>  [51] BiocSingular_1.12.0         xfun_0.33                   #>  [53] multtest_2.52.0             cluster_2.1.4               #>  [55] caTools_1.18.2              ggtext_0.1.2                #>  [57] KEGGREST_1.36.3             tibble_3.1.8                #>  [59] ggrepel_0.9.1               ape_5.6-2                   #>  [61] listenv_0.8.0               Biostrings_2.64.1           #>  [63] png_0.1-7                   future_1.28.0               #>  [65] withr_2.5.0                 bitops_1.0-7                #>  [67] ranger_0.14.1               plyr_1.8.7                  #>  [69] GSEABase_1.58.0             AnnotationFilter_1.20.0     #>  [71] pracma_2.4.2                dqrng_0.3.0                 #>  [73] pillar_1.8.1                RcppParallel_5.1.5          #>  [75] gplots_3.1.3                GlobalOptions_0.1.2         #>  [77] cachem_1.0.6                GenomicFeatures_1.48.4      #>  [79] fs_1.5.2                    DelayedMatrixStats_1.18.1   #>  [81] vctrs_0.4.2                 ellipsis_0.3.2              #>  [83] tools_4.2.1                 munsell_0.5.0               #>  [85] DelayedArray_0.22.0         fastmap_1.1.0               #>  [87] compiler_4.2.1              abind_1.4-5                 #>  [89] httpuv_1.6.6                rtracklayer_1.56.1          #>  [91] plotly_4.10.0               rgeos_0.5-9                 #>  [93] GenomeInfoDbData_1.2.8      gridExtra_2.3               #>  [95] edgeR_3.38.4                lattice_0.20-45             #>  [97] deldir_1.0-6                utf8_1.2.2                  #>  [99] later_1.3.0                 dplyr_1.0.10                #> [101] BiocFileCache_2.4.0         jsonlite_1.8.2              #> [103] scales_1.2.1                graph_1.74.0                #> [105] ScaledMatrix_1.4.1          carData_3.0-5               #> [107] pbapply_1.5-0               sparseMatrixStats_1.8.0     #> [109] genefilter_1.78.0           lazyeval_0.2.2              #> [111] promises_1.2.0.1            car_3.1-0                   #> [113] R.utils_2.12.0              goftest_1.2-3               #> [115] spatstat.utils_3.0-1        reticulate_1.26             #> [117] rmarkdown_2.17              pkgdown_2.0.6               #> [119] cowplot_1.1.1               textshaping_0.3.6           #> [121] statmod_1.4.37              Rtsne_0.16                  #> [123] uwot_0.1.14                 igraph_1.3.5                #> [125] HDF5Array_1.24.2            proxyC_0.3.3                #> [127] yaml_2.3.5                  systemfonts_1.0.4           #> [129] htmltools_0.5.3             memoise_2.0.1               #> [131] BiocIO_1.6.0                Seurat_4.2.0                #> [133] locfit_1.5-9.6              viridisLite_0.4.1           #> [135] digest_0.6.29               assertthat_0.2.1            #> [137] mime_0.12                   rappdirs_0.3.3              #> [139] KMsurv_0.1-5                SIMLR_1.22.0                #> [141] RSQLite_2.2.18              future.apply_1.9.1          #> [143] data.table_1.14.2           blob_1.2.3                  #> [145] R.oo_1.25.0                 survMisc_0.5.6              #> [147] ragg_1.2.3                  splines_4.2.1               #> [149] labeling_0.4.2              Rhdf5lib_1.18.2             #> [151] ProtGenerics_1.28.0         gridtext_0.1.5              #> [153] RCurl_1.98-1.9              broom_1.0.1                 #> [155] hms_1.1.2                   rhdf5_2.40.0                #> [157] colorspace_2.0-3            DropletUtils_1.16.0         #> [159] BiocManager_1.30.18         shape_1.4.6                 #> [161] sass_0.4.2                  Rcpp_1.0.9                  #> [163] bookdown_0.30               RANN_2.6.1                  #> [165] circlize_0.4.15             fansi_1.0.3                 #> [167] parallelly_1.32.1           R6_2.5.1                    #> [169] grid_4.2.1                  ggridges_0.5.4              #> [171] lifecycle_1.0.3             bluster_1.6.0               #> [173] curl_4.3.3                  ggsignif_0.6.3              #> [175] leiden_0.4.3                jquerylib_0.1.4             #> [177] SpatialExperiment_1.6.1     Matrix_1.5-3                #> [179] EnsDb.Mmusculus.v79_2.99.0  desc_1.4.2                  #> [181] RcppAnnoy_0.0.19            RColorBrewer_1.1-3          #> [183] iterators_1.0.14            spatstat.explore_3.0-5      #> [185] stringr_1.4.1               htmlwidgets_1.5.4           #> [187] markdown_1.1                beachmat_2.12.0             #> [189] polyclip_1.10-0             biomaRt_2.52.0              #> [191] purrr_0.3.5                 mgcv_1.8-40                 #> [193] globals_0.16.1              patchwork_1.1.2             #> [195] spatstat.random_3.0-1       progressr_0.11.0            #> [197] codetools_0.2-18            metapod_1.4.0               #> [199] gtools_3.9.3                prettyunits_1.1.1           #> [201] SingleCellExperiment_1.18.1 dbplyr_2.2.1                #> [203] EnsDb.Hsapiens.v79_2.99.0   RSpectra_0.16-1             #> [205] R.methodsS3_1.8.2           gtable_0.3.1                #> [207] DBI_1.1.3                   tensor_1.5                  #> [209] httr_1.4.4                  highr_0.9                   #> [211] KernSmooth_2.23-20          stringi_1.7.8               #> [213] progress_1.2.2              reshape2_1.4.4              #> [215] msigdbr_7.5.1               farver_2.1.1                #> [217] annotate_1.74.0             magick_2.7.3                #> [219] xml2_1.3.3                  BiocNeighbors_1.14.0        #> [221] AUCell_1.18.1               restfulr_0.0.15             #> [223] scattermore_0.8             scran_1.24.1                #> [225] bit_4.0.4                   spatstat.data_3.0-0         #> [227] pkgconfig_2.0.3             babelgene_22.9              #> [229] rstatix_0.7.0               knitr_1.40"},{"path":"/articles/scFeatures_summary.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An overview of scFeatures' functions","text":"vignette provides overview scFeatures package. scFeatures generates features single-cell RNA-seq, spatial proteomic spatial transcriptomic data. features span across six categories representing different molecular views cellular characteristics. include () cell type proportions, (ii) cell type specific gene expressions, (iii) cell type specific pathway expressions, (iv) cell type specific cell-cell interaction (CCI) scores, (v) overall aggregated gene expressions (vi) spatial metrics. features enable comprehensive multi-view representation expression data can used downstream analysis association study.","code":"library(scFeatures)"},{"path":"/articles/scFeatures_summary.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"An overview of scFeatures' functions","text":"scFeatures can run using one line code scfeatures_result <- scFeatures(data), generates list data frames containing feature types form samples x features. list function generating individual feature types scRNA-seq, spatial proteomic spatial transcriptomic data.","code":"data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) data <- process_data(data, normalise = TRUE) #  perform normalisation  scfeatures_result <- scFeatures(data)"},{"path":"/articles/scFeatures_summary.html","id":"scfeatures-for-single-cell-rna-seq-data","dir":"Articles","previous_headings":"","what":"scFeatures for single-cell RNA-seq data","title":"An overview of scFeatures' functions","text":"scFeatures accept Seurat object containing sample celltype columns. SingleCellExperiment SpatialExperiment object, provide function makeSeurat() conversion.","code":"#--------------------------------------------------------------------------- # read in data #--------------------------------------------------------------------------- data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) data <- process_data(data, normalise = TRUE) #  perform normalisation  # format the patient ID as `a_cond_b` eg, `patient09_cond_nonresponder`. # This is so that we can retrieve the sample ID and the corresponding condition # when running downstream analysis on the generated features data$sample <- paste0(data$sample, \"_cond_\", data$condition)  #--------------------------------------------------------------------------- # cell type proportions #--------------------------------------------------------------------------- feature_proportion_raw <- run_proportion_raw(data) feature_proportion_logit <- run_proportion_logit(data) feature_proportion_ratio <- run_proportion_ratio(data)   #--------------------------------------------------------------------------- # cell type specific gene expressions #--------------------------------------------------------------------------- # optional step, run if mitochondria amd ribosomal genes are not of interest data_remove_mito <- remove_mito(data)  # by default, use the top variable genes # users can change the number of top variable genes by changing `num_top_gene` # alternatively, users can also input genes of interest in a dataframe format genes_of_interest <- data.frame(     marker = c(\"S100A11\", \"GZMB\", \"DUSP1\"),     celltype = c(       \"CD8, T Effector Memory\",        \"CD8, T Effector Memory\",        \"Naive T Cells\"     ) )  feature_gene_mean_celltype <- run_gene_mean_celltype(data_remove_mito) feature_gene_prop_celltype <- run_gene_prop_celltype(   data_remove_mito, genes = genes_of_interest ) feature_gene_cor_celltype <- run_gene_cor_celltype(   data_remove_mito, num_top_gene = 50 ) # by default, pick around 100 most variable genes per cell type, can change # this number through the num_top_gene argument   #--------------------------------------------------------------------------- # cell type specific pathway expressions #--------------------------------------------------------------------------- feature_pathway_gsva <- run_pathway_gsva(data, species = \"Homo sapiens\") feature_pathway_mean <- run_pathway_mean(data, species = \"Homo sapiens\") # by default, use the 50 hallmark pathways, users can also input their gene # set of interest in a list format geneset <- list(     \"pathway_a\" = c(\"CAPNS1\", \"TLCD1\"),     \"pathway_b\" = c(\"PEX6\", \"DPRXP4\") ) feature_pathway_prop <- run_pathway_prop(   data, geneset = geneset,   species = \"Homo sapiens\" )   #--------------------------------------------------------------------------- # cell type specific cell-cell interactions #--------------------------------------------------------------------------- feature_CCI <- run_CCI(data)   #--------------------------------------------------------------------------- # Bulk expressions #---------------------------------------------------------------------------  # by default, use the top variable genes # users can change the number of top variable genes by changing `num_top_gene` # alternatively, users can also input their genes of interest in a list format feature_gene_mean_bulk <- run_gene_mean(data) feature_gene_cor_bulk <- run_gene_cor(data, num_top_gene = 5) genes_of_interest <- c(\"TIGIT\", \"PDCD1\") feature_gene_prop_bulk <- run_gene_prop(data, genes = genes_of_interest) # by default, pick 1500 most variable genes, can change this number through the # num_top_gene argument"},{"path":"/articles/scFeatures_summary.html","id":"scfeatures-for-spatial-proteomics","dir":"Articles","previous_headings":"","what":"scFeatures for spatial proteomics","title":"An overview of scFeatures' functions","text":"input data Seurat object containing celltype, sample, x_coord y_coord columns. SingleCellExperiment SpatialExperiment object, provide function makeSeurat() conversion. use Note , spatial proteomics contain genes, feature categories pathway expressions cell-cell interactions applicable.","code":"#--------------------------------------------------------------------------- # read in data #---------------------------------------------------------------------------  data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") )  # randomly generate some x and y coordinate to make this a  # toy \"spatial proteomics\" data x <- sample(1:100, ncol(data) , replace = T) y <- sample(1:100, ncol(data) , replace = T) data <- makeSeurat(data, spatialCoords = list(x,y)) data <- process_data(data, normalise = T)    #--------------------------------------------------------------------------- # cell type proportions #--------------------------------------------------------------------------- feature_proportion_raw <- run_proportion_raw(data, type = \"spatial_p\") feature_proportion_logit <- run_proportion_logit(data, type = \"spatial_p\") feature_proportion_ratio <- run_proportion_ratio(data, type = \"spatial_p\")   #--------------------------------------------------------------------------- # cell type specific gene expressions #--------------------------------------------------------------------------- feature_gene_mean_celltype <- run_gene_mean_celltype(data, type = \"spatial_p\") feature_gene_prop_celltype <- run_gene_prop_celltype(data, type = \"spatial_p\") feature_gene_cor_celltype <- run_gene_cor_celltype(data, type = \"spatial_p\")   #--------------------------------------------------------------------------- # Bulk expressions #--------------------------------------------------------------------------- feature_gene_mean_bulk <- run_gene_mean(data, type = \"spatial_p\") feature_gene_prop_bulk <- run_gene_prop(data, type = \"spatial_p\") feature_gene_cor_bulk <- run_gene_cor(data, type = \"spatial_p\")   #--------------------------------------------------------------------------- # Spatial metrics #--------------------------------------------------------------------------- feature_L_stats <- run_L_function(data, type = \"spatial_p\") feature_morans_I <- run_Morans_I(data, type = \"spatial_p\") feature_celltype_interact <- run_celltype_interaction(data, type = \"spatial_p\") feature_nn_correlation <- run_nn_correlation(data, type = \"spatial_p\")"},{"path":"/articles/scFeatures_summary.html","id":"scfeature-for-spatial-transcriptomics","dir":"Articles","previous_headings":"","what":"scFeature for spatial transcriptomics","title":"An overview of scFeatures' functions","text":"input data Seurat object containing sample, x_cord y_cord columns. Additionally, apart RNA assay, contains gene expression spot, predictions assay also needed. predictions assay matrix form cell types x spot, stores cell type probability spot. can obtained performing cell type prediction using reference data.","code":"#--------------------------------------------------------------------------- # read in data #---------------------------------------------------------------------------  data <- readRDS(   system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") )  # generate a toy \"spatial transcriptomics\" data data$celltype <- NULL #spatial transcriptomics don't have celltype   # randomly generate some x and y coordinates x <- sample(1:100, ncol(data) , replace = T) y <- sample(1:100, ncol(data) , replace = T)  # for spatial transcriptomics, we need to estimate the number of cells per spot data <- get_num_cell_per_spot(data)  # also need a dataframe of celltype probability at each spot  # here we randomly create one  nrow <- 5 #pretend there are 5 cell types  ncol <- ncol(data)   # Create a matrix of random numbers matrix <- matrix(runif(nrow * ncol), nrow, ncol) # Normalize the columns of the matrix so that each column sum to 1 prediction.scores <-  sweep(matrix, 2, colSums(matrix), \"/\") colnames(prediction.scores) <- colnames(data) rownames(prediction.scores) <- c(paste0(\"celltype\", 1:5))  # format the data using makeSeurat data <- makeSeurat(data, spatialCoords = list(x,y), spotProbability = prediction.scores) data <- process_data(data, normalise = T)       # format the patient ID as `a_cond_b` eg, `patient09_cond_nonresponder`. # This is so that we can retrieve the sample ID and the corresponding # condition when running downstream analysis on the generated features data$sample <- paste0(data$sample, \"_cond_\", data$condition)  #--------------------------------------------------------------------------- # cell type proportions #--------------------------------------------------------------------------- feature_proportion_raw <- run_proportion_raw(data, type = \"spatial_t\") feature_proportion_logit <- run_proportion_logit(data, type = \"spatial_t\") feature_proportion_ratio <- run_proportion_ratio(data, type = \"spatial_t\")   #--------------------------------------------------------------------------- # cell type specific gene expressions #--------------------------------------------------------------------------- data_remove_mito <- remove_mito(data) feature_gene_mean_celltype <- run_gene_mean_celltype(   data_remove_mito, type = \"spatial_t\", genes = rownames(data_remove_mito)[1:10] #to speed up example )   #--------------------------------------------------------------------------- # cell type specific pathway expressions #--------------------------------------------------------------------------- feature_pathway_mean <- run_pathway_mean(data, geneset = NULL, type = \"spatial_t\")   #--------------------------------------------------------------------------- # Bulk expressions #--------------------------------------------------------------------------- feature_gene_mean_bulk <- run_gene_mean(data, type = \"spatial_t\") feature_gene_prop_bulk <- run_gene_prop(data, type = \"spatial_t\") feature_gene_cor_bulk <- run_gene_cor(data, type = \"spatial_t\")   #--------------------------------------------------------------------------- # Spatial metrics #--------------------------------------------------------------------------- feature_L_stats <- run_L_function(data, type = \"spatial_t\") feature_morans_I <- run_Morans_I(data, type = \"spatial_t\") feature_celltype_interact <- run_celltype_interaction(data, type = \"spatial_t\") feature_nn_correlation <- run_nn_correlation(data, type = \"spatial_t\")"},{"path":"/articles/scFeatures_summary.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"An overview of scFeatures' functions","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Debian GNU/Linux 11 (bullseye) #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.13.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] scFeatures_0.99.9 BiocStyle_2.24.0  #>  #> loaded via a namespace (and not attached): #>   [1] rappdirs_0.3.3              rtracklayer_1.56.1          #>   [3] scattermore_0.8             SpatialExperiment_1.6.1     #>   [5] R.methodsS3_1.8.2           SeuratObject_4.1.2          #>   [7] ragg_1.2.3                  tidyr_1.2.1                 #>   [9] ggplot2_3.3.6               bit64_4.0.5                 #>  [11] knitr_1.40                  R.utils_2.12.0              #>  [13] irlba_2.3.5.1               DelayedArray_0.22.0         #>  [15] data.table_1.14.2           rpart_4.1.16                #>  [17] KEGGREST_1.36.3             RCurl_1.98-1.9              #>  [19] AnnotationFilter_1.20.0     generics_0.1.3              #>  [21] BiocGenerics_0.42.0         GenomicFeatures_1.48.4      #>  [23] ScaledMatrix_1.4.1          cowplot_1.1.1               #>  [25] RSQLite_2.2.18              EnsDb.Mmusculus.v79_2.99.0  #>  [27] RANN_2.6.1                  future_1.28.0               #>  [29] bit_4.0.4                   spatstat.data_3.0-0         #>  [31] xml2_1.3.3                  httpuv_1.6.6                #>  [33] SummarizedExperiment_1.26.1 assertthat_0.2.1            #>  [35] xfun_0.33                   hms_1.1.2                   #>  [37] jquerylib_0.1.4             babelgene_22.9              #>  [39] evaluate_0.17               promises_1.2.0.1            #>  [41] fansi_1.0.3                 restfulr_0.0.15             #>  [43] progress_1.2.2              caTools_1.18.2              #>  [45] dbplyr_2.2.1                igraph_1.3.5                #>  [47] DBI_1.1.3                   htmlwidgets_1.5.4           #>  [49] spatstat.geom_3.0-3         stats4_4.2.1                #>  [51] purrr_0.3.5                 ellipsis_0.3.2              #>  [53] RSpectra_0.16-1             dplyr_1.0.10                #>  [55] bookdown_0.30               annotate_1.74.0             #>  [57] RcppParallel_5.1.5          biomaRt_2.52.0              #>  [59] deldir_1.0-6                sparseMatrixStats_1.8.0     #>  [61] MatrixGenerics_1.8.1        vctrs_0.4.2                 #>  [63] SingleCellExperiment_1.18.1 Biobase_2.56.0              #>  [65] ensembldb_2.20.2            ROCR_1.0-11                 #>  [67] abind_1.4-5                 withr_2.5.0                 #>  [69] cachem_1.0.6                SIMLR_1.22.0                #>  [71] progressr_0.11.0            sctransform_0.3.5           #>  [73] GenomicAlignments_1.32.1    prettyunits_1.1.1           #>  [75] scran_1.24.1                goftest_1.2-3               #>  [77] cluster_2.1.4               ape_5.6-2                   #>  [79] lazyeval_0.2.2              crayon_1.5.2                #>  [81] spatstat.explore_3.0-5      edgeR_3.38.4                #>  [83] pkgconfig_2.0.3             GenomeInfoDb_1.32.4         #>  [85] nlme_3.1-160                ProtGenerics_1.28.0         #>  [87] rlang_1.0.6                 globals_0.16.1              #>  [89] lifecycle_1.0.3             miniUI_0.1.1.1              #>  [91] filelock_1.0.2              BiocFileCache_2.4.0         #>  [93] rsvd_1.0.5                  rprojroot_2.0.3             #>  [95] polyclip_1.10-0             GSVA_1.44.5                 #>  [97] matrixStats_0.62.0          lmtest_0.9-40               #>  [99] graph_1.74.0                Matrix_1.5-3                #> [101] Rhdf5lib_1.18.2             zoo_1.8-11                  #> [103] ggridges_0.5.4              GlobalOptions_0.1.2         #> [105] pheatmap_1.0.12             png_0.1-7                   #> [107] viridisLite_0.4.1           rjson_0.2.21                #> [109] bitops_1.0-7                R.oo_1.25.0                 #> [111] rhdf5filters_1.8.0          KernSmooth_2.23-20          #> [113] SingleCellSignalR_1.8.0     Biostrings_2.64.1           #> [115] blob_1.2.3                  DelayedMatrixStats_1.18.1   #> [117] shape_1.4.6                 stringr_1.4.1               #> [119] parallelly_1.32.1           spatstat.random_3.0-1       #> [121] S4Vectors_0.34.0            beachmat_2.12.0             #> [123] scales_1.2.1                GSEABase_1.58.0             #> [125] memoise_2.0.1               magrittr_2.0.3              #> [127] plyr_1.8.7                  ica_1.0-3                   #> [129] gplots_3.1.3                zlibbioc_1.42.0             #> [131] compiler_4.2.1              dqrng_0.3.0                 #> [133] BiocIO_1.6.0                RColorBrewer_1.1-3          #> [135] fitdistrplus_1.1-8          Rsamtools_2.12.0            #> [137] cli_3.4.1                   XVector_0.36.0              #> [139] listenv_0.8.0               EnsDb.Hsapiens.v79_2.99.0   #> [141] patchwork_1.1.2             pbapply_1.5-0               #> [143] MASS_7.3-58.1               mgcv_1.8-40                 #> [145] tidyselect_1.2.0            stringi_1.7.8               #> [147] textshaping_0.3.6           yaml_2.3.5                  #> [149] BiocSingular_1.12.0         locfit_1.5-9.6              #> [151] ggrepel_0.9.1               grid_4.2.1                  #> [153] sass_0.4.2                  tools_4.2.1                 #> [155] future.apply_1.9.1          parallel_4.2.1              #> [157] circlize_0.4.15             rstudioapi_0.14             #> [159] foreach_1.5.2               bluster_1.6.0               #> [161] AUCell_1.18.1               metapod_1.4.0               #> [163] gridExtra_2.3               Rtsne_0.16                  #> [165] DropletUtils_1.16.0         proxyC_0.3.3                #> [167] digest_0.6.29               BiocManager_1.30.18         #> [169] rgeos_0.5-9                 shiny_1.7.2                 #> [171] pracma_2.4.2                Rcpp_1.0.9                  #> [173] GenomicRanges_1.48.0        scuttle_1.6.3               #> [175] later_1.3.0                 RcppAnnoy_0.0.19            #> [177] httr_1.4.4                  AnnotationDbi_1.58.0        #> [179] colorspace_2.0-3            XML_3.99-0.11               #> [181] fs_1.5.2                    tensor_1.5                  #> [183] reticulate_1.26             IRanges_2.30.1              #> [185] splines_4.2.1               uwot_0.1.14                 #> [187] statmod_1.4.37              spatstat.utils_3.0-1        #> [189] pkgdown_2.0.6               sp_1.5-0                    #> [191] multtest_2.52.0             plotly_4.10.0               #> [193] systemfonts_1.0.4           xtable_1.8-4                #> [195] jsonlite_1.8.2              R6_2.5.1                    #> [197] pillar_1.8.1                htmltools_0.5.3             #> [199] mime_0.12                   glue_1.6.2                  #> [201] fastmap_1.1.0               BiocParallel_1.30.4         #> [203] BiocNeighbors_1.14.0        codetools_0.2-18            #> [205] utf8_1.2.2                  lattice_0.20-45             #> [207] bslib_0.4.0                 spatstat.sparse_3.0-0       #> [209] tibble_3.1.8                curl_4.3.3                  #> [211] leiden_0.4.3                gtools_3.9.3                #> [213] magick_2.7.3                survival_3.4-0              #> [215] limma_3.52.4                rmarkdown_2.17              #> [217] desc_1.4.2                  munsell_0.5.0               #> [219] rhdf5_2.40.0                GenomeInfoDbData_1.2.8      #> [221] iterators_1.0.14            HDF5Array_1.24.2            #> [223] msigdbr_7.5.1               reshape2_1.4.4              #> [225] gtable_0.3.1                spatstat.core_2.4-4         #> [227] Seurat_4.2.0"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yue Cao. Author, maintainer. Yingxin Lin. Author. Ellis Patrick. Author. Pengyi Yang. Author. Jean Yee Hwa Yang. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cao,Y.,Lin,Y.,Patrick,E.,Yang,P.,&Yang,J.Y.H.(2022). scFeatures: Multi-view representations single-cell spatial data disease outcome prediction. Bioinformatics, Volume 38, Issue 20, 15 October 2022, Pages 4745-4753.","code":"@Article{,   title = {scFeatures: multi-view representations of single-cell and spatial data for disease outcome prediction},   journal = {Bioinformatics},   author = {{Cao,Y.} and {Lin,Y.} and {Patrick,E.} and {Yang,P.} and & Yang,J.Y.H.},   volume = {38},   number = {20},   pages = {4745-4753},   year = {2022},   month = {08},   issn = {1367-4803},   doi = {10.1093/bioinformatics/btac590},   url = {https://doi.org/10.1093/bioinformatics/btac590},   eprint = {https://academic.oup.com/bioinformatics/article-pdf/38/20/4745/46535070/btac590.pdf}, }"},{"path":"/index.html","id":"scfeatures-multi-view-representations-of-single-cell-and-spatial-data-for-disease-outcome-prediction","dir":"","previous_headings":"","what":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","title":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","text":"scFeatures tool generates multi-view representations single-cell spatial data construction total 17 feature types belonging following six categories. cell type proportions cell type specific gene expressions cell type specific pathway expressions cell type specific cell-cell interaction (CCI) scores overall aggregated gene expressions spatial metrics Overview","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","text":"latest scFeatures can installed using devtools:","code":"library(devtools) devtools::install_github(\"SydneyBioX/scFeatures\")"},{"path":"/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","text":"number vignettes provided Vignettes folder repo. can also viewed clicking link .","code":""},{"path":"/index.html","id":"feaeture-generation-using-scfeatures","dir":"","previous_headings":"Vignettes","what":"Feaeture generation using scFeatures","title":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","text":"Brief vignette - brief vignette quick starting point provides checklist functions apply single-cell spatial data. Detailed vignette case studies - provides -depth description feature types explanation output. contains step--step case study application scFeatures ) scRNA-seq data, ii) spatial proteomics data iii) spatial transcriptomics data.","code":""},{"path":"/index.html","id":"association-study-of-the-features-with-conditions","dir":"","previous_headings":"Vignettes","what":"Association study of the features with conditions","title":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","text":"provide function run_association_study_report(scfeatures_result, output_folder) automatically runs association study generates html output report. report visualises features associated conditions (eg, diseased vs non-diseased). Association study vignette - explains usage function. Example html output - example generated report.","code":""},{"path":"/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"scFeatures: Multi-view representations of single-cell and spatial data\n       for disease outcome prediction","text":"Cao, Y., Lin, Y., Patrick, E., Yang, P., & Yang, J. Y. H. (2022). scFeatures: multi-view representations single-cell spatial data disease outcome prediction. O. Vitek (Ed.), Bioinformatics (Vol. 38, Issue 20, pp. 4745–4753). Oxford University Press (OUP). https://doi.org/10.1093/bioinformatics/btac590","code":""},{"path":"/reference/get_num_cell_per_spot.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a relative number of cells per spot for\nspatial transcriptomics data — get_num_cell_per_spot","title":"Estimate a relative number of cells per spot for\nspatial transcriptomics data — get_num_cell_per_spot","text":"function takes spatial transcriptomics data input estimates relative number cells per spot data. number cells estimated library size scaled range 1, 100. value stored number_cells attribute.","code":""},{"path":"/reference/get_num_cell_per_spot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a relative number of cells per spot for\nspatial transcriptomics data — get_num_cell_per_spot","text":"","code":"get_num_cell_per_spot(data)"},{"path":"/reference/get_num_cell_per_spot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a relative number of cells per spot for\nspatial transcriptomics data — get_num_cell_per_spot","text":"data spatial transcriptomics data Seurat object.","code":""},{"path":"/reference/get_num_cell_per_spot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a relative number of cells per spot for\nspatial transcriptomics data — get_num_cell_per_spot","text":"object relative number cells/spot stored number_cells attribute.","code":""},{"path":"/reference/get_num_cell_per_spot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a relative number of cells per spot for\nspatial transcriptomics data — get_num_cell_per_spot","text":"","code":"data <- readRDS(system.file(     \"extdata\", \"example_spatial_transcriptomics.rds\",     package = \"scFeatures\" )) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection data <- process_data(data, normalise = FALSE) #> Error in process_data(data, normalise = FALSE): trying to get slot \"meta.data\" from an object of a basic class (\"function\") with no slots data <- get_num_cell_per_spot(data) #> Error in base::colSums(x, na.rm = na.rm, dims = dims, ...): 'x' must be an array of at least two dimensions"},{"path":"/reference/makeSeurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Format data into Seurat object structured for scFeatures functions — makeSeurat","title":"Format data into Seurat object structured for scFeatures functions — makeSeurat","text":"function used convert SingleCellExperiment, SpatialExperiment Seurat object Seurat object containing required fields structured scFeatures functions.","code":""},{"path":"/reference/makeSeurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format data into Seurat object structured for scFeatures functions — makeSeurat","text":"","code":"makeSeurat(   data,   sample = NULL,   celltype = NULL,   assay = NULL,   spatialCoords = NULL,   spotProbability = NULL )"},{"path":"/reference/makeSeurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format data into Seurat object structured for scFeatures functions — makeSeurat","text":"data input data, either SingleCellExperiment SpatialExperiment object. object needs contain column named \"sample\" column named \"celltype\". Alternatively, user can provide name column containing sample celltype sample celltype argument. passing SingleCellExperiment SpatialExperiment, default use assay stored \"logcount\". Alternatively, user can specify assay use assay argument. users want construct features spatial category, default need columns called \"x_cord\" \"y_cord\". Alternatively, please specify relevant column spatialCoords argument. spot-based spatial transcriptomics, also requires matrix containing cell type prediction probability spot, format celltype x spot sample vector providing sample identifier cell. provided, assume data contain metadata column \"sample\" running scFeatures. celltype vector providing celltype identifier. provided, assume data contain metadata column \"celltype\" running scFeatures. assay assay identifier using SingleCellExperiment SpatialExperiment object. spatialCoords spatialCoords identifiers provided list two vectors, users want construct features spatial category. provided, assume data contain metadata columns \"x_cord\" \"y_cord\" constructing spatial features. spotProbability matrix format celltype x spot, entry prediction probability cell type spot. needed spatial transcriptomics data.","code":""},{"path":"/reference/makeSeurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format data into Seurat object structured for scFeatures functions — makeSeurat","text":"Seurat dataset containing required metadata running scFeatures.","code":""},{"path":"/reference/makeSeurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format data into Seurat object structured for scFeatures functions — makeSeurat","text":"","code":"if (FALSE) {  data <- readRDS(system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\"))  coordinate <- list(x = rep(1, ncol(data)), y = rep(1, ncol(data)))  data <- makeSeurat(data, spatialCoords = coordinate) }"},{"path":"/reference/process_data.html","id":null,"dir":"Reference","previous_headings":"","what":"data pre-processing — process_data","title":"data pre-processing — process_data","text":"function takes Seurat object input data cleaning pre-processing. example, replaces \"+\" \"-\" signs celltype column \"plus\" \"minus\", respectively. also removes patients less 10 cells across cell types. normalise argument set TRUE, function normalize data using Seurat::NormalizeData function.","code":""},{"path":"/reference/process_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data pre-processing — process_data","text":"","code":"process_data(data, normalise = TRUE)"},{"path":"/reference/process_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data pre-processing — process_data","text":"data input data, Seurat object. normalise logical value indicating whether normalize data . Default value TRUE.","code":""},{"path":"/reference/process_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data pre-processing — process_data","text":"Seurat object","code":""},{"path":"/reference/process_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data pre-processing — process_data","text":"","code":"data <- readRDS(system.file(     \"extdata\", \"example_spatial_transcriptomics.rds\",     package = \"scFeatures\" )) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection data <- process_data(data, normalise = FALSE) #> Error in process_data(data, normalise = FALSE): trying to get slot \"meta.data\" from an object of a basic class (\"function\") with no slots"},{"path":"/reference/remove_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove mitochondrial and ribosomal genes, and other highly correlated genes — remove_mito","title":"Remove mitochondrial and ribosomal genes, and other highly correlated genes — remove_mito","text":"function removes mitochondria ribosomal genes genes highly correlated genes, mitochondria ribosomal genes typically  interesting look .","code":""},{"path":"/reference/remove_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove mitochondrial and ribosomal genes, and other highly correlated genes — remove_mito","text":"","code":"remove_mito(data)"},{"path":"/reference/remove_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove mitochondrial and ribosomal genes, and other highly correlated genes — remove_mito","text":"data Seurat object containing expression data","code":""},{"path":"/reference/remove_mito.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove mitochondrial and ribosomal genes, and other highly correlated genes — remove_mito","text":"Seurat object mito rib genes highly correlated genes removed","code":""},{"path":[]},{"path":"/reference/run_CCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell cell communication score — run_CCI","title":"Generate cell cell communication score — run_CCI","text":"function calculates ligand receptor interaction score using SingleCellSignalR. output features form celltype -> celltype b -- ligand 1 -> receptor 2 , indicates interaction ligand 1 celltype receptor 2 celltype b. supports scRNA-seq.","code":""},{"path":"/reference/run_CCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell cell communication score — run_CCI","text":"","code":"run_CCI(data, type = \"scrna\", ncores = 1)"},{"path":"/reference/run_CCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell cell communication score — run_CCI","text":"data input data, Seurat object containing celltype sample label type input data type, either scrna, spatial_p, spatial_t ncores number cores","code":""},{"path":"/reference/run_CCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell cell communication score — run_CCI","text":"matrix samples x features","code":""},{"path":"/reference/run_CCI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell cell communication score — run_CCI","text":"","code":"data <- readRDS(system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")) feature_CCI <- run_CCI(data, type = \"scrna\" ,  ncores = 1 ) #> Warning: column names 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result #> Warning: column names 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y', 'LRscore.x', 'LRscore.y' are duplicated in the result"},{"path":"/reference/run_L_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate L stats — run_L_function","title":"Generate L stats — run_L_function","text":"function calculates L-statistics measure spatial autocorrelation. function supports  spatial proteomics spatial transcriptomics.","code":""},{"path":"/reference/run_L_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate L stats — run_L_function","text":"","code":"run_L_function(data, type = \"spatial_p\", ncores = 1)"},{"path":"/reference/run_L_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate L stats — run_L_function","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_L_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate L stats — run_L_function","text":"dataframe samples x features","code":""},{"path":"/reference/run_L_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate L stats — run_L_function","text":"","code":"data <- readRDS(system.file(     \"extdata\", \"example_spatial_proteomics.rds\",     package = \"scFeatures\" )) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection feature_L_function <- run_L_function(data, type = \"spatial_p\", ncores = 1) #> Warning: please make sure the data is in a Seurat object #> Error in \"sample\" %in% names(data@meta.data): trying to get slot \"meta.data\" from an object of a basic class (\"function\") with no slots"},{"path":"/reference/run_Morans_I.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Moran's I — run_Morans_I","title":"Generate Moran's I — run_Morans_I","text":"function calculates Moran's measure spatial autocorrelation, indicattion strongly feature(ie, genes/proteins) expression values sample cluster disperse. function supports spatial proteomics spatial transcriptomics.","code":""},{"path":"/reference/run_Morans_I.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Moran's I — run_Morans_I","text":"","code":"run_Morans_I(data, type = \"spatial_p\", ncores = 1)"},{"path":"/reference/run_Morans_I.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Moran's I — run_Morans_I","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_Morans_I.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Moran's I — run_Morans_I","text":"dataframe samples x features","code":""},{"path":"/reference/run_Morans_I.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Moran's I — run_Morans_I","text":"","code":"data <- readRDS(system.file(     \"extdata\", \"example_spatial_proteomics.rds\",     package = \"scFeatures\" )) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection feature_Morans_I <- run_Morans_I(data, type = \"spatial_p\", ncores = 1) #> Warning: please make sure the data is in a Seurat object #> Error in \"sample\" %in% names(data@meta.data): trying to get slot \"meta.data\" from an object of a basic class (\"function\") with no slots"},{"path":"/reference/run_association_study_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an association study report in HTML format — run_association_study_report","title":"Create an association study report in HTML format — run_association_study_report","text":"function takes feature matrix generated scFeatures input creates HTML report containing results association study. report saved specified output folder.","code":""},{"path":"/reference/run_association_study_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an association study report in HTML format — run_association_study_report","text":"","code":"run_association_study_report(scfeatures_result, output_folder)"},{"path":"/reference/run_association_study_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an association study report in HTML format — run_association_study_report","text":"scfeatures_result named list storing scFeatures feature output. Note names list one multiple following: proportion_raw, proportion_logit, proportion_ratio, gene_mean_celltype, gene_prop_celltype, gene_cor_celltype, pathway_gsva, pathway_mean, pathway_prop, CCI, gene_mean_aggregated, gene_cor_aggregated, gene_prop_aggregated. output_folder path folder HTML report saved","code":""},{"path":"/reference/run_association_study_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an association study report in HTML format — run_association_study_report","text":"HTML file, saved directory defined output_folder argument","code":""},{"path":"/reference/run_association_study_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an association study report in HTML format — run_association_study_report","text":"","code":"output_folder <- tempdir() run_association_study_report(scfeatures_result, output_folder ) #> Error in names(scfeatures_result) %in% c(\"proportion_raw\", \"proportion_logit\",     \"proportion_ratio\", \"gene_mean_celltype\", \"gene_prop_celltype\",     \"gene_cor_celltype\", \"pathway_gsva\", \"pathway_mean\", \"pathway_prop\",     \"CCI\", \"gene_mean_aggregated\", \"gene_cor_aggregated\", \"gene_prop_aggregated\"): object 'scfeatures_result' not found"},{"path":"/reference/run_celltype_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type interaction — run_celltype_interaction","title":"Generate cell type interaction — run_celltype_interaction","text":"function calculates pairwise distance cell types sample using coordinates cell types cells. function supports spatial proteomics spatial transcriptomics.","code":""},{"path":"/reference/run_celltype_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type interaction — run_celltype_interaction","text":"","code":"run_celltype_interaction(data, type = \"spatial_p\", ncores = 1)"},{"path":"/reference/run_celltype_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type interaction — run_celltype_interaction","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_celltype_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type interaction — run_celltype_interaction","text":"dataframe samples x features","code":""},{"path":"/reference/run_celltype_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type interaction — run_celltype_interaction","text":"","code":"data <- readRDS(system.file(     \"extdata\", \"example_spatial_proteomics.rds\",     package = \"scFeatures\" )) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection feature_celltype_interaction <- run_celltype_interaction(     data,     type = \"spatial_p\", ncores = 1 ) #> Warning: please make sure the data is in a Seurat object #> Error in \"sample\" %in% names(data@meta.data): trying to get slot \"meta.data\" from an object of a basic class (\"function\") with no slots"},{"path":"/reference/run_gene_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate overall aggregated gene correlation — run_gene_cor","title":"Generate overall aggregated gene correlation — run_gene_cor","text":"function computes correlation gene expression across samples. user can specify genes interest, let function use top variable genes default. function supports scRNA-seq, spatial proteomics, spatial transcriptomics.","code":""},{"path":"/reference/run_gene_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate overall aggregated gene correlation — run_gene_cor","text":"","code":"run_gene_cor(   data,   type = \"scrna\",   genes = NULL,   num_top_gene = NULL,   ncores = 1 )"},{"path":"/reference/run_gene_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate overall aggregated gene correlation — run_gene_cor","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". genes Default NULL, case top variable genes used. provided user, need format list containing genes interest, eg, genes <- c(GZMA\", \"GZMK\", \"CCR7\", \"RPL38\" ) num_top_gene Number top variable genes use genes provided. Defaults 5. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_gene_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate overall aggregated gene correlation — run_gene_cor","text":"dataframe samples x features","code":""},{"path":"/reference/run_gene_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate overall aggregated gene correlation — run_gene_cor","text":"","code":"if (FALSE) {  data <- readRDS(    system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")  )  feature_gene_cor <- run_gene_cor(    data, type = \"scrna\", num_top_gene = 5, ncores = 1  ) }"},{"path":"/reference/run_gene_cor_celltype.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type specific gene expression correlation — run_gene_cor_celltype","title":"Generate cell type specific gene expression correlation — run_gene_cor_celltype","text":"function computes correlation expression set genes cell type input data. input data can three types: 'scrna', 'spatial_p' 'spatial_t'. genes parameter provided user, top variable genes selected based num_top_gene parameter (defaults 100).","code":""},{"path":"/reference/run_gene_cor_celltype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type specific gene expression correlation — run_gene_cor_celltype","text":"","code":"run_gene_cor_celltype(   data,   type = \"scrna\",   genes = NULL,   num_top_gene = NULL,   ncores = 1 )"},{"path":"/reference/run_gene_cor_celltype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type specific gene expression correlation — run_gene_cor_celltype","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". genes Optional dataframe 2 columns: 'marker' 'celltype'. 'marker' column contain genes interest (e.g. 'S100A11', 'CCL4'), 'celltype' column contain celltype gene expression computed (e.g. 'CD8', 'B cells'). provided, top variable genes used based num_top_gene parameter. num_top_gene Number top genes use genes provided. Defaults 5. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_gene_cor_celltype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type specific gene expression correlation — run_gene_cor_celltype","text":"dataframe samples x features","code":""},{"path":"/reference/run_gene_cor_celltype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type specific gene expression correlation — run_gene_cor_celltype","text":"","code":"if (FALSE) {  data <- readRDS(system.file(\"extdata\",    \"example_scrnaseq.rds\",     package = \"scFeatures\"  ))  # optional step, if mito and ribo genes are not of interest  data_remove_mito <- remove_mito(data)  feature_gene_cor_celltype <- run_gene_cor_celltype(    data_remove_mito,    type = \"scrna\", num_top_gene = 100, ncores = 1  ) }"},{"path":"/reference/run_gene_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate overall aggregated mean expression — run_gene_mean","title":"Generate overall aggregated mean expression — run_gene_mean","text":"function computes mean expression genes across samples. user can specify genes interest, let function use top variable genes default. function supports scRNA-seq, spatial proteomics, spatial transcriptomics.","code":""},{"path":"/reference/run_gene_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate overall aggregated mean expression — run_gene_mean","text":"","code":"run_gene_mean(   data,   type = \"scrna\",   genes = NULL,   num_top_gene = NULL,   ncores = 1 )"},{"path":"/reference/run_gene_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate overall aggregated mean expression — run_gene_mean","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". genes Default NULL, case top variable genes used. provided user, need format list containing genes interest, eg, genes <- c(GZMA\", \"GZMK\", \"CCR7\", \"RPL38\" ) num_top_gene Number top variable genes use genes provided. Defaults 1500. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_gene_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate overall aggregated mean expression — run_gene_mean","text":"dataframe samples x features","code":""},{"path":"/reference/run_gene_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate overall aggregated mean expression — run_gene_mean","text":"","code":"data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) feature_gene_mean <- run_gene_mean(     data,     type = \"scrna\", num_top_gene = 1500, ncores = 1 )"},{"path":"/reference/run_gene_mean_celltype.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type specific gene mean expression — run_gene_mean_celltype","title":"Generate cell type specific gene mean expression — run_gene_mean_celltype","text":"function computes mean expression set genes cell type input data. input data can three types: 'scrna', 'spatial_p' 'spatial_t'. genes parameter p rovided user, top variable genes selected based num_top_gene parameter (defaults 100).","code":""},{"path":"/reference/run_gene_mean_celltype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type specific gene mean expression — run_gene_mean_celltype","text":"","code":"run_gene_mean_celltype(   data,   type = \"scrna\",   genes = NULL,   num_top_gene = NULL,   ncores = 1 )"},{"path":"/reference/run_gene_mean_celltype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type specific gene mean expression — run_gene_mean_celltype","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". genes Optional dataframe 2 columns: 'marker' 'celltype'. 'marker' column contain genes interest (e.g. 'S100A11', 'CCL4'), 'celltype' column contain celltype gene expression computed (e.g. 'CD8', 'B cells'). provided, top variable genes used based num_top_gene parameter. num_top_gene Number top genes use genes provided. Defaults 100. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_gene_mean_celltype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type specific gene mean expression — run_gene_mean_celltype","text":"dataframe samples x features","code":""},{"path":"/reference/run_gene_mean_celltype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type specific gene mean expression — run_gene_mean_celltype","text":"","code":"if (FALSE) {   data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")   )   # optional step, if mito and ribo genes are not of interest   data_remove_mito <- remove_mito(data)   feature_gene_mean_celltype <- run_gene_mean_celltype(     data_remove_mito,     type = \"scrna\", num_top_gene = 100, ncores = 1   ) }"},{"path":"/reference/run_gene_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate overall aggregated gene proportion expression — run_gene_prop","title":"Generate overall aggregated gene proportion expression — run_gene_prop","text":"function computes proportion gene expression across samples. user can specify genes interest, let function use top variable genes default. function supports scRNA-seq, spatial proteomics, spatial transcriptomics.","code":""},{"path":"/reference/run_gene_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate overall aggregated gene proportion expression — run_gene_prop","text":"","code":"run_gene_prop(   data,   type = \"scrna\",   genes = NULL,   num_top_gene = NULL,   ncores = 1 )"},{"path":"/reference/run_gene_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate overall aggregated gene proportion expression — run_gene_prop","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". genes Default NULL, case top variable genes used. provided user, need format list containing genes interest, eg, genes <- c(GZMA\", \"GZMK\", \"CCR7\", \"RPL38\" ) num_top_gene Number top variable genes use genes provided. Defaults 1500. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_gene_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate overall aggregated gene proportion expression — run_gene_prop","text":"dataframe samples x features","code":""},{"path":"/reference/run_gene_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate overall aggregated gene proportion expression — run_gene_prop","text":"","code":"data <- readRDS(system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")) feature_gene_prop <- run_gene_prop(data, type = \"scrna\", num_top_gene = 1500, ncores = 1)"},{"path":"/reference/run_gene_prop_celltype.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type specific gene proportion expression — run_gene_prop_celltype","title":"Generate cell type specific gene proportion expression — run_gene_prop_celltype","text":"function computes proportion expression set genes cell type input data. input data can three types: 'scrna', 'spatial_p' 'spatial_t'. genes parameter provided user, top variable genes selected based num_top_gene parameter (defaults 100).","code":""},{"path":"/reference/run_gene_prop_celltype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type specific gene proportion expression — run_gene_prop_celltype","text":"","code":"run_gene_prop_celltype(   data,   type = \"scrna\",   genes = NULL,   num_top_gene = NULL,   ncores = 1 )"},{"path":"/reference/run_gene_prop_celltype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type specific gene proportion expression — run_gene_prop_celltype","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". genes Optional dataframe 2 columns: 'marker' 'celltype'. 'marker' column contain genes interest (e.g. 'S100A11', 'CCL4'), 'celltype' column contain celltype gene expression computed (e.g. 'CD8', 'B cells'). provided, top variable genes used based num_top_gene parameter. num_top_gene Number top genes use genes provided. Defaults 100. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_gene_prop_celltype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type specific gene proportion expression — run_gene_prop_celltype","text":"dataframe samples x features","code":""},{"path":"/reference/run_gene_prop_celltype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type specific gene proportion expression — run_gene_prop_celltype","text":"","code":"if (FALSE) {  data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")  ) # optional step, if mito and ribo genes are not of interest data_remove_mito <- remove_mito(data)  feature_gene_prop_celltype <- run_gene_prop_celltype(     data_remove_mito,     type = \"scrna\", num_top_gene = 100, ncores = 1  ) }"},{"path":"/reference/run_nn_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate nearest neighbour correlation — run_nn_correlation","title":"Generate nearest neighbour correlation — run_nn_correlation","text":"function calculates nearest neighbour correlation feature (eg, proteins) sample. calculated taking correlation cell nearest neighbours cell particular feature. function supports spatial proteomics, spatial transcriptomics.","code":""},{"path":"/reference/run_nn_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate nearest neighbour correlation — run_nn_correlation","text":"","code":"run_nn_correlation(data, type = \"spatial_p\", num_top_gene = NULL, ncores = 1)"},{"path":"/reference/run_nn_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate nearest neighbour correlation — run_nn_correlation","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". num_top_gene Number top variable genes use genes provided. Defaults 1500. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_nn_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate nearest neighbour correlation — run_nn_correlation","text":"dataframe samples x features","code":""},{"path":"/reference/run_nn_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate nearest neighbour correlation — run_nn_correlation","text":"","code":"data <- readRDS(system.file(     \"extdata\", \"example_spatial_proteomics.rds\",     package = \"scFeatures\" )) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection feature_nn_correlation <- run_nn_correlation(     data,     type = \"spatial_p\", ncores = 1 ) #> Warning: please make sure the data is in a Seurat object #> Error in \"sample\" %in% names(data@meta.data): trying to get slot \"meta.data\" from an object of a basic class (\"function\") with no slots"},{"path":"/reference/run_pathway_gsva.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pathway score using gene set enrichement analysis — run_pathway_gsva","title":"Generate pathway score using gene set enrichement analysis — run_pathway_gsva","text":"function calculates pathway scores given input dataset gene set using gene set enrichment analysis (GSVA). supports scRNA-seq, spatial proteomics spatial transcriptomics. currently supports two pathway analysis methods: ssgsea aucell. default, uses 50 hallmark gene sets msigdb. Alternatively, users can provide gene sets interest list format.","code":""},{"path":"/reference/run_pathway_gsva.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pathway score using gene set enrichement analysis — run_pathway_gsva","text":"","code":"run_pathway_gsva(   data,   method = \"ssgsea\",   geneset = NULL,   species = \"Homo sapiens\",   type = \"scrna\",   subsample = TRUE,   ncores = 1 )"},{"path":"/reference/run_pathway_gsva.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pathway score using gene set enrichement analysis — run_pathway_gsva","text":"data Seurat object containing celltype sample label method Type pathway analysis method, currently support ssgsea aucell geneset default (geneset argument specified), use 50 hallmark gene set msigdb. users can also provide geneset interest list format, list entry containing vector names genes gene set. eg, geneset <- list(\"pathway_a\" = c(\"CAPN1\", ...), \"pathway_b\" = c(\"PEX6\")) species Whether species \"Homo sapiens\" \"Mus musculus\". Default \"Homo sapiens\". type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". subsample Whether subsample, either T F. larger datasets (eg, 30,000 cells), subsample function can used increase speed. ncores Number cores parallel processing.","code":""},{"path":"/reference/run_pathway_gsva.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pathway score using gene set enrichement analysis — run_pathway_gsva","text":"dataframe samples x features","code":""},{"path":"/reference/run_pathway_gsva.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pathway score using gene set enrichement analysis — run_pathway_gsva","text":"","code":"if (FALSE) {  data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")  )  feature_pathway_gsva <- run_pathway_gsva(     data,     geneset = NULL, species = \"Homo sapiens\",     type = \"scrna\", subsample = FALSE, ncores = 1  ) }"},{"path":"/reference/run_pathway_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pathway score using expression level — run_pathway_mean","title":"Generate pathway score using expression level — run_pathway_mean","text":"function calculates pathway scores given dataset gene set using gene expression levels. supports scRNA-seq, spatial transcriptomics spatial proteomics spatial transcriptomics). default, uses 50 hallmark gene sets msigdb. Alternatively, users can provide gene sets interest list format.","code":""},{"path":"/reference/run_pathway_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pathway score using expression level — run_pathway_mean","text":"","code":"run_pathway_mean(   data,   geneset = NULL,   species = \"Homo sapiens\",   type = \"scrna\",   ncores = 1 )"},{"path":"/reference/run_pathway_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pathway score using expression level — run_pathway_mean","text":"data Seurat object containing celltype sample label geneset default (geneset argument specified), use 50 hallmark gene set msigdb. users can also provide geneset interest list format, list entry containing vector names genes gene set. eg, geneset <- list(\"pathway_a\" = c(\"CANS1\", ...), \"pathway_b\" = c(\"PEX6\")) species Whether species \"Homo sapiens\" \"Mus musculus\". Default \"Homo sapiens\". type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_pathway_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pathway score using expression level — run_pathway_mean","text":"dataframe samples x features","code":""},{"path":"/reference/run_pathway_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pathway score using expression level — run_pathway_mean","text":"","code":"if (FALSE) {  data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")  )  feature_pathway_mean <- run_pathway_mean(     data,     geneset = NULL, species = \"Homo sapiens\",     type = \"scrna\", ncores = 1  ) }"},{"path":"/reference/run_pathway_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pathway score using proportion of expression — run_pathway_prop","title":"Generate pathway score using proportion of expression — run_pathway_prop","text":"function calculates pathway scores given input dataset gene set using proportion gene expression levels. supports scRNA-seq, spatial transcriptomics spatial proteomics spatial transcriptomics). default, uses 50 hallmark gene sets msigdb. Alternatively, users can provide gene sets interest list format.","code":""},{"path":"/reference/run_pathway_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pathway score using proportion of expression — run_pathway_prop","text":"","code":"run_pathway_prop(   data,   geneset = NULL,   species = \"Homo sapiens\",   type = \"scrna\",   ncores = 1 )"},{"path":"/reference/run_pathway_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pathway score using proportion of expression — run_pathway_prop","text":"data Seurat object containing celltype sample label geneset default (geneset argument specified), use 50 hallmark gene set msigdb. users can also provide geneset interest list format, list entry containing vector names genes gene set. eg, geneset <- list(\"pathway_a\" = c(\"CANS1\", ...), \"pathway_b\" = c(\"PEX6\")) species Whether species \"Homo sapiens\" \"Mus musculus\". Default \"Homo sapiens\". type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_pathway_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pathway score using proportion of expression — run_pathway_prop","text":"dataframe samples x features","code":""},{"path":"/reference/run_pathway_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pathway score using proportion of expression — run_pathway_prop","text":"","code":"if (FALSE) {  data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\")  )  feature_pathway_prop <- run_pathway_prop(     data,     geneset = NULL, species = \"Homo sapiens\",     type = \"scrna\", ncores = 1  ) }"},{"path":"/reference/run_proportion_logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type proportions, with logit transformation — run_proportion_logit","title":"Generate cell type proportions, with logit transformation — run_proportion_logit","text":"function calculates proportions cells belonging cell type, applies logit transformation proportions. input data must contain sample celltype metadata column. function supports scRNA-seq spatial proteomics. function returns dataframe samples rows cell types columns.","code":""},{"path":"/reference/run_proportion_logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type proportions, with logit transformation — run_proportion_logit","text":"","code":"run_proportion_logit(data, type = \"scrna\", ncores = 1)"},{"path":"/reference/run_proportion_logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type proportions, with logit transformation — run_proportion_logit","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_proportion_logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type proportions, with logit transformation — run_proportion_logit","text":"dataframe samples x features","code":""},{"path":"/reference/run_proportion_logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type proportions, with logit transformation — run_proportion_logit","text":"","code":"data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) feature_proportion_logit <- run_proportion_logit(     data,     type = \"scrna\", ncores = 1 )"},{"path":"/reference/run_proportion_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type proportion ratio — run_proportion_ratio","title":"Generate cell type proportion ratio — run_proportion_ratio","text":"function calculates pairwise cell type proportion ratio sample. applies logit transformation proportions. input data must contain sample celltype metadata column. function supports scRNA-seq spatial proteomics. function returns dataframe samples rows cell types columns.","code":""},{"path":"/reference/run_proportion_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type proportion ratio — run_proportion_ratio","text":"","code":"run_proportion_ratio(data, type = \"scrna\", ncores = 1)"},{"path":"/reference/run_proportion_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type proportion ratio — run_proportion_ratio","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_proportion_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type proportion ratio — run_proportion_ratio","text":"dataframe samples x features","code":""},{"path":"/reference/run_proportion_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type proportion ratio — run_proportion_ratio","text":"","code":"data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) feature_proportion_ratio <- run_proportion_ratio(     data,     type = \"scrna\", ncores = 1 )"},{"path":"/reference/run_proportion_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type proportion raw — run_proportion_raw","title":"Generate cell type proportion raw — run_proportion_raw","text":"function calculates proportions cells belonging cell type. input data must contain sample celltype metadata column. function supports scRNA-seq spatial proteomics. function returns dataframe samples rows cell types columns.","code":""},{"path":"/reference/run_proportion_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type proportion raw — run_proportion_raw","text":"","code":"run_proportion_raw(data, type = \"scrna\", ncores = 1)"},{"path":"/reference/run_proportion_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type proportion raw — run_proportion_raw","text":"data Seurat object containing celltype sample label type type dataset, either \"scrna\", \"spatial_t\", \"spatial_p\". ncores Number cores parallel processing.","code":""},{"path":"/reference/run_proportion_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type proportion raw — run_proportion_raw","text":"dataframe samples x features","code":""},{"path":"/reference/run_proportion_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type proportion raw — run_proportion_raw","text":"","code":"data <- readRDS(     system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\") ) feature_proportion_raw <- run_proportion_raw(     data,     type = \"scrna\", ncores = 1 )"},{"path":"/reference/scFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to run all feature types in scFeatures — scFeatures","title":"Wrapper function to run all feature types in scFeatures — scFeatures","text":"scFeatures function generates variety features Seurat object containing single cell RNA-sequencing data. default, feature types generated returned single list containing multiple data frames.","code":""},{"path":"/reference/scFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to run all feature types in scFeatures — scFeatures","text":"","code":"scFeatures(   data,   feature_types = NULL,   type = \"scrna\",   ncores = 1,   species = \"Homo sapiens\",   celltype_genes = NULL,   aggregated_genes = NULL,   geneset = NULL,   sample = NULL,   celltype = NULL,   assay = NULL,   spatialCoords = NULL )"},{"path":"/reference/scFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to run all feature types in scFeatures — scFeatures","text":"data input data, Seurat object containing \"sample\" \"celltype\" column. \"x_cord\" \"y_cord\" also required constructing features spatial metrics category. feature_types vector containing name feature types generate, options \"proportion_raw\", \"proportion_logit\" , \"proportion_ratio\", \"gene_mean_celltype\", \"gene_prop_celltype\", \"gene_cor_celltype\", \"pathway_gsva\" , \"pathway_mean\", \"pathway_prop\", \"CCI\", \"gene_mean_aggregated\", \"gene_prop_aggregated\", 'gene_cor_aggregated', \"L_stats\" , \"celltype_interaction\" , \"morans_I\", \"nn_correlation\". value provided, feature types generated. type input data type, either \"scrna\" (stands single-cell RNA-sequencing data), \"spatial_p\" (stands spatial proteomics data), \"spatial_t\" (stands single cell spatial data ) ncores number cores , default 1 species either \"Homo sapiens\" \"Mus musculus\". Defaults \"Homo sapiens\" value provided celltype_genes genes interest celltype specific gene expression feature category value provided, top variable genes used aggregated_genes genes interest overall aggregated gene expression feature category value provided, top variable genes used geneset geneset interest celltype specific pathway feature category value provided, 50 hallmark pathways used sample sample identifier using SingleCellExperiment celltype celltype identifier using SingleCellExperiment assay assay identifier using SingleCellExperiment spatialCoords spatialCoords identifiers using SingleCellExperiment","code":""},{"path":"/reference/scFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to run all feature types in scFeatures — scFeatures","text":"list dataframes containing generated feature matrix form sample x features","code":""},{"path":"/reference/scFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function to run all feature types in scFeatures — scFeatures","text":"","code":"if (FALSE) {  data <- readRDS(system.file(\"extdata\", \"example_scrnaseq.rds\", package = \"scFeatures\"))  scfeatures_result <- scFeatures(data, type = \"scrna\") }"}]
